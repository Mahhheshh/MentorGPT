from flask import request, Blueprint, stream_with_context, current_app, jsonify
from dotenv import load_dotenv
from .file_manager import FileManager
import openai
import os
import asyncio

api = Blueprint('api', __name__, url_prefix='/')

load_dotenv()
openai.api_key = os.environ.get("OPENAI_API_KEY")
# print(openai.api_key)

@api.route('/', methods=['GET'])
async def index():
    """This is the main route of the application."""
    return jsonify(
        {
            'message': 'Welcome to the API',
            'status': 'success',
            'routes': {
                'main': {
                    'method': 'GET',
                    'url': '/',
                    'description': 'This is the main route of the application.'
                },
                'ask': {
                    'method': 'POST',
                    'url': '/ask',
                    'description': 'This is the test route of the application.',
                }
            },
        }
    )


@api.route('/ask', methods=['GET','POST'])
def ask():
    """
    Returns a stream of data using Server-Sent Events.

    The response is an HTTP response with MIME type 'text/event-stream' and a stream of data generated by the
    context_with_stream(data) generator function.

    Returns:
        Flask Response: An HTTP response with MIME type 'text/event-stream' and a stream of data.
    """

    headers = {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
    }

    question = request.json.get('question')

    messages = [
        {
            "role": "system",
            "content": "You are a programming expert and assistant who provides answers related to programming only. You do not provide code but instead give hints or steps to solve questions.",
        },
        {
            "role": "user",
            "content": "What are the steps to reverse a string in Python?",
        },
        {
        "role":"user",
        "content": "Note: please do not provide me the code, give me steps or hints that will help me solve the question."
        },
        {
        "role":"user",
        "content":f"{question}"
        }
    ]

    @stream_with_context
    def event_stream():
        """This is the event stream function."""

        result = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            stream=True,
        )

        response_stream: str = ''
        stop_iteration: str = None
        final_answer: str = ''

        for chunk in result:

            if stop_iteration is not None:
                break

            try:
                stop_iteration = chunk['choices'][0]['finish_reason']
                response_stream = f"{chunk['choices'][0]['delta']['content']}"
                final_answer += response_stream
                yield response_stream.encode('utf-8')
            except KeyError:
                print("key Not Found in delta!!")

        asyncio.run(FileManager.write_json(
            {'question': question, 'answer': final_answer}))

    return current_app.response_class(event_stream(), headers=headers, mimetype="text/event-stream")